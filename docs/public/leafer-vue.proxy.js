import { ref as $, watch as A, onUnmounted as E, createRenderer as I, onMounted as U, defineComponent as v, renderSlot as w, h as y } from 'vue'; import { App as C, UI as d, UI as x } from 'leafer-ui'

const c = class extends d {constructor() { super(...arguments); this.visible = !1 }}; function p() { function r(t) { const n = { content: '', css: [] }; t.unshift({ content: '\u2618\uFE0FLeafer-vue warn:' }), t.forEach((o, e) => { n.content += `%c${(o == null ? void 0 : o.content) ?? ' '}`, n.css.push(`${o != null && o.color ? `color:${o.color}` : ''}${o != null && o.backgroundColor ? `;background:${o.backgroundColor}` : ''};padding: 0px${e === 0 ? ';border-top-left-radius: 25px; border-bottom-left-radius: 8px' : ''}${e === t.length - 1 ? ';border-top-right-radius: 8px; border-bottom-right-radius: 8px' : ''}`) }), console.warn(`${n.content}`, ...n.css) } return { log: r } } function h(r) { return r.slice(2).replace(/([A-Z])/g, (t, n, o) => o === 0 ? n.toLowerCase() : `.${n.toLowerCase()}`) } const { log: b } = p(); const f = I({ createElement(r, t, n, o) { return x.one({ tag: r, ...o }) }, patchProp(r, t, n, o) { t.startsWith('on') && r.on(h(t), o), r[t] = o }, insert(r, t) { r && t && t.add(r) }, remove(r) { r == null || r.destroy() }, createText(r) { return r.trim() && b([{ content: ' \u4E0D\u652F\u6301\u76F4\u63A5\u5199\u5165\u6587\u672C\uFF0C\u8BF7\u4F7F\u7528 ' }, { color: '#6eacf8', backgroundColor: '#222222', content: `<Text text="${r.trim()}" />` }, { content: ' \u4EE3\u66FF' }]), null }, createComment() { return new c() }, setText() {}, setElementText() {}, parentNode(r) { return r == null ? void 0 : r.parent }, nextSibling(r) {
  let o; if (!r)
    return null; const t = ((o = r == null ? void 0 : r.parent) == null ? void 0 : o.children) || [r]; if ((t == null ? void 0 : t.length) === 1)
    return null; const n = t.findIndex(e => e.innerId === r.innerId); return t.length <= n + 1 ? null : t[n + 1] ?? null
} }); const i = f.createApp; function a(r) { const t = {}; return Object.keys(r).forEach((n) => { n.startsWith('on') || (t[n] = r[n]) }), t } function u(r, t) { A(() => a(r), (n) => { t.set(n) }) } const F = v({ inheritAttrs: !1, setup(r, { slots: t, expose: n, attrs: o }) { const e = $(); const g = a(o); let s; function l() { s = new C({ ...g, view: e.value, start: !1 }), i({ render: () => w(t, 'default') }).mount(s), s.start() } function m() { s.destroy() } return U(() => { l(), u(o, s), n({ container: s }) }), E(m), () => y('canvas', { ref: e }) } }); export { F as LeaferApp }
